package it.unipr.netsec.ipstack.lorawan;


import java.security.GeneralSecurityException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.AlgorithmParameterSpec;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.zoolu.util.ByteUtils;


public class AesCMAC {
	
	static final byte[] ZEROS=new byte[16];
	static final AlgorithmParameterSpec IV0=new IvParameterSpec(ZEROS);

	byte[] key;
	byte[] k1;
	byte[] k2;	
	Cipher aesCbc;
	byte[] last=new byte[16];
	int lastLen=0;
	//byte[] temp=new byte[1000]; // used only to avoid creation of output byte array	
	
	
	public AesCMAC(byte[] key) throws GeneralSecurityException {
		this.key=key;
		byte[][] subkeys=generateSubkeys(key);
		k1=subkeys[0];
		k2=subkeys[1];
		aesCbc=Cipher.getInstance("AES/CBC/NoPadding");
		aesCbc.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(key,"AES"),IV0);
	}
	
	public void update(byte[] data) {
		if (data.length==0) return;
		// else
		int len=lastLen+data.length;
		int newLastLen=(len-1)%16+1;
		len-=newLastLen;
		if (len>0) {
			if (lastLen>0) aesCbc.update(last,0,lastLen);
			aesCbc.update(data,0,len-lastLen);
			System.arraycopy(data,len-lastLen,last,0,newLastLen);
		}
		else {
			System.arraycopy(data,0,last,lastLen,newLastLen-lastLen);
		}
		lastLen=newLastLen;
	}
	
	public byte[] doFinal(byte[] data) throws IllegalBlockSizeException, BadPaddingException {
		update(data);
		return doFinal();
	}

	public byte[] doFinal() throws IllegalBlockSizeException, BadPaddingException {
		byte[] k;
		if (lastLen==16) k=k1;
		else {
			k=k2;
			last[lastLen++]=(byte)0x80;
			while (lastLen<16) last[lastLen++]=0x00;
		}
		for (int i=0; i<16; i++) last[i]^=k[i];
		return aesCbc.doFinal(last);
	}
	
	private byte[][] generateSubkeys(byte[] key) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, InvalidAlgorithmParameterException {
		byte[][] subkeys=new byte[2][16];
		byte[] k1=subkeys[0];
		byte[] k2=subkeys[1];
		Cipher aesEcb=Cipher.getInstance("AES/ECB/NoPadding");
		aesEcb.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(key,"AES"));
		byte[] L=aesEcb.doFinal(ZEROS);
		for (int i=0; i<16; i++) {
			k1[i]=(byte)(L[i]<<1);
			if (i<15) k1[i]|=(L[i+1]>>7)&0x01;
			else
			if ((L[0]&0x80)!=0) k1[15]|=(byte)0x87;
		}
		for (int i=0; i<16; i++) {
			k2[i]=(byte)(k1[i]<<1);
			if (i<15) k2[i]|=(k1[i+1]>>7)&0x01;
			else
			if ((k1[0]&0x80)!=0) k2[15]^=(byte)0x87;
		}
		byte[] temp=ByteUtils.copy(k2); temp[0]^=0x80;
		return subkeys;
	}

}
